{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\alarovoi\\\\Desktop\\\\projects\\\\udemy-react-course\\\\next-js-bigger\\\\pages\\\\meetups\\\\index.js\",\n    _this = this;\n\nimport React from 'react';\nimport MeetupList from \"../../components/meetups/MeetupList\";\n\nvar Meetups = function Meetups(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MeetupList, {\n      meetups: props.meetups\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false);\n};\n\n_c = Meetups;\n// export const getServerSideProps = async (context) => { // the difference is that this one not runs on build, but always runs after deployment\n//     //any logic will run on server\n//\n//     const req = context.req // we use this function is we need these(req, res) and if we need it to be regenerated on every request\n//     const res = context.res\n//\n//     return {\n//         props: {\n//             meetups: DUMMY_MEETUPS\n//         }\n//     }\n// }\nexport var __N_SSG = true;\nexport default Meetups;\n\nvar _c;\n\n$RefreshReg$(_c, \"Meetups\");","map":{"version":3,"sources":["C:/Users/alarovoi/Desktop/projects/udemy-react-course/next-js-bigger/pages/meetups/index.js"],"names":["React","MeetupList","Meetups","props","meetups"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,qCAAvB;;AAIA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAW;AAEvB,sBACI;AAAA,2BACI,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAKH,CAPD;;KAAMF,O;AAkCN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeA,OAAf","sourcesContent":["import React from 'react';\r\nimport MeetupList from \"../../components/meetups/MeetupList\";\r\n\r\nimport {MongoClient} from \"mongodb\";\r\n\r\nconst Meetups = (props) => {\r\n\r\n    return (\r\n        <>\r\n            <MeetupList meetups={props.meetups} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport const getStaticProps = async () => { // prerender this page on server and fetching data to it\r\n    // some logic\r\n\r\n    const client = await MongoClient.connect('mongodb+srv://mthrfckr:0YRCwLmXQkFAygzH@cluster0.l1nje.mongodb.net/meetups?retryWrites=true&w=majority')\r\n\r\n    const collection = client.db(\"meetups\").collection(\"meetups\");\r\n\r\n    const meetups = await collection.find().toArray()\r\n\r\n    await client.close()\r\n\r\n    return {\r\n        props: {\r\n            meetups: meetups.map(m => ({\r\n                title: m.title,\r\n                address: m.address,\r\n                image: m.image,\r\n                description: m.description,\r\n                id: m._id.toString()\r\n            }))\r\n        },\r\n        revalidate: 1  //seconds to re pre render from next\r\n    }\r\n}\r\n\r\n// export const getServerSideProps = async (context) => { // the difference is that this one not runs on build, but always runs after deployment\r\n//     //any logic will run on server\r\n//\r\n//     const req = context.req // we use this function is we need these(req, res) and if we need it to be regenerated on every request\r\n//     const res = context.res\r\n//\r\n//     return {\r\n//         props: {\r\n//             meetups: DUMMY_MEETUPS\r\n//         }\r\n//     }\r\n// }\r\n\r\nexport default Meetups;\r\n"]},"metadata":{},"sourceType":"module"}